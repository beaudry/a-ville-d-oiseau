@page "/"

@inject VilleService VilleService
@inject NavigationManager Navigation

@if (villesParNom.Count == 0 || VilleDepart == null)
{
    <p>Chargement...</p>
}
else
{
    <div class="noprint" >
        <label class="champ">
            Point de départ:
            <select @bind="NomVilleDepart">
                @foreach (var ville in villesParNom.Values.OrderBy(ville => ville.Nom))
                {
                    <option value="@ville.Nom">@ville.Nom</option>
                }
            </select>
        </label>
            
        <div class="champ">
            <label>
                Trier par:
                <select @onchange="ChangerTri">
                    <option value="@MethodeDeTri.Defaut">Défaut</option>
                    <option value="@MethodeDeTri.Distance">Distance</option>
                    <option value="@MethodeDeTri.Alphabetique">Nom</option>
                </select>
            </label>
                
            <label><input type="checkbox" @bind="TriInverse" /> Inverser</label>
        </div>
            
        <fieldset class="champ">
            <legend>Mode visuel</legend>
            <div><label><input type="radio"  @onchange="ChangerVisuel" checked="@Mode.Equals(ModeVisuel.Debogage)" name="mode-visuel" value="@ModeVisuel.Debogage" /> Débogage</label></div>
            <div><label><input type="radio" @onchange="ChangerVisuel" checked="@Mode.Equals(ModeVisuel.Impression)" name="mode-visuel" value="@ModeVisuel.Impression" /> Impression recto-verso</label></div>
        </fieldset>
        
        @if (Mode == ModeVisuel.Impression)
        {
            <label class="champ">
                Cartes par feuille:
                <input type="number" @bind="nombreCartesParFeuille" min="1" max="@villesParNom.Count" />
            </label>
        }

        <div class="champ"><label><input type="checkbox" @bind="AfficherFiligrane"/> Afficher le filigrane</label></div>
    </div>


    @if (Mode == ModeVisuel.Impression)
    {
        @foreach (var page in GetVillesPaginees())
        {
            <div class="cartes">
                @foreach (var ville in page)
                {
                    <Recto filigrane="@AfficherFiligrane" ville="@ville" villeDepart="@VilleDepart" />
                }
            </div>

            <div class="cartes verso">
                @foreach (var ville in page)
                {
                    <Verso filigrane="@AfficherFiligrane" ville="@ville" villeDepart="@VilleDepart" />
                }
            </div>
        }

    }
    else
    {
        <div class="cartes debogage">
            @foreach (var ville in GetVillesTriees())
            {
                <Recto filigrane="@AfficherFiligrane" ville="@ville" villeDepart="@VilleDepart" />
                <Verso filigrane="@AfficherFiligrane" ville="@ville" villeDepart="@VilleDepart" />
            }
        </div>
    }
}

@code {
    public enum ModeVisuel
    {
        Debogage,
        Impression
    }

    public enum MethodeDeTri
    {
        Defaut,
        Distance,
        Alphabetique
    }

    private const string nomUrlFiligrane = "filigrane";
    private const string nomUrlModeVisuel = "mode";
    private const string nomUrlTri = "tri";
    private const string nomUrlTriInverse = "inverser";
    private const string nomUrlVilleDepart = "depart";

    private bool afficherFiligrane;
    private ModeVisuel modeVisuel;
    private MethodeDeTri tri;
    private bool triInverse;
    private string nomVilleDepart = default!;

    [Parameter]
    [SupplyParameterFromQuery(Name = nomUrlFiligrane)]
    public bool AfficherFiligrane
    {
        get => afficherFiligrane;
        set
        {
            if (afficherFiligrane != value)
            {
                afficherFiligrane = value;
                Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nomUrlFiligrane, value));
            }
        }
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = nomUrlModeVisuel)]
    public string ModeEnChaine
    {
        set
        {
            Enum.TryParse<ModeVisuel>(value, out ModeVisuel resultat);

            modeVisuel = resultat;
        }
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = nomUrlTri)]
    public string TriEnChaine
    {
        set
        {
            Enum.TryParse<MethodeDeTri>(value, out MethodeDeTri resultat);

            tri = resultat;
        }
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = nomUrlTriInverse)]
    public bool TriInverse
    {
        get => triInverse;
        set
        {
            if (triInverse != value)
            {
                triInverse = value;

                Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nomUrlTriInverse, value));
            }
        }
    }

    [Parameter]
    [SupplyParameterFromQuery(Name = nomUrlVilleDepart)]
    public string NomVilleDepart
    {
        get => nomVilleDepart;
        set
        {
            if (nomVilleDepart != value)
            {
                nomVilleDepart = value;

                Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nomUrlVilleDepart, value));
            }
        }
    }

    public ModeVisuel Mode
    {
        get => modeVisuel;
        set
        {
            if (modeVisuel != value)
            {
                modeVisuel = value;

                Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nomUrlModeVisuel, value.ToString()));
            }
        }
    }

    public MethodeDeTri Tri
    {
        get => tri;
        set
        {
            if (tri != value)
            {
                tri = value;

                Navigation.NavigateTo(Navigation.GetUriWithQueryParameter(nomUrlTri, value.ToString()));
            }
        }
    }

    public Ville VilleDepart => villesParNom[NomVilleDepart];

    private Dictionary<string, Ville> villesParNom = new Dictionary<string, Ville>();
    private int nombreCartesParFeuille = 9;

    protected override async Task OnInitializedAsync()
    {
        var villes = await VilleService.ChargerVilles();
        NomVilleDepart = villes[0].Nom;

        villesParNom = villes.ToDictionary(ville => ville.Nom);

        FiligraneService.DefinirVilles(villes.Select(villes => villes.Nom));
    }

    IEnumerable<Ville> GetVillesTriees()
    {
        IEnumerable<Ville> villesTriees = villesParNom.Values;

        switch (Tri)
        {
            case MethodeDeTri.Alphabetique:
                villesTriees = villesTriees.OrderBy(ville => ville.Nom);
                break;
            case MethodeDeTri.Distance:
                villesTriees = villesTriees.OrderBy(ville => ville.Coordonnees.GetDistanceTo(VilleDepart.Coordonnees));
                break;
        }

        if (TriInverse)
        {
            villesTriees = villesTriees.Reverse();
        }

        return villesTriees;
    }

    Ville[][] GetVillesPaginees()
    {
        return GetVillesTriees()
            .Select((ville, index) => new { Index = index, Ville = ville })
            .GroupBy(x => x.Index / nombreCartesParFeuille)
            .Select(x => x.Select(v => v.Ville).ToArray())
            .ToArray();
    }

    void ChangerVisuel(ChangeEventArgs evenement)
    {
        Mode = Enum.Parse<ModeVisuel>((string)evenement.Value!);
    }

    void ChangerTri(ChangeEventArgs evenement)
    {
        Tri = Enum.Parse<MethodeDeTri>((string)evenement.Value!);
    }
}
