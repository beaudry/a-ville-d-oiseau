@page "/"

@inject VilleService VilleService

@if (villes == null || villeDepart == null)
{
    <p>Chargement...</p>
}
else
{
    <div class="noprint" >
        <label class="champ">
            Point de départ:
            <select @onchange="ChangerVilleDepart">
                @foreach (var ville in villes.OrderBy(ville => ville.Nom))
                {
                    <option selected="@villeDepart.Equals(ville)" value="@ville.Nom">@ville.Nom</option>
                }
            </select>
        </label>
            
        <div class="champ">
            <label>
                Trier par:
                <select @onchange="ChangerTri">
                    <option value="@Tri.Defaut">Défaut</option>
                    <option value="@Tri.Distance">Distance</option>
                    <option value="@Tri.Alphabetique">Nom</option>
                </select>
            </label>
                
            <label><input type="checkbox" @bind="triInverse" /> Inverser</label>
        </div>
            
        <fieldset class="champ">
            <legend>Mode visuel</legend>
            <div><label><input type="radio" @onchange="ChangerVisuel" checked="@modeVisuel.Equals(ModeVisuel.Impression)" name="mode-visuel" value="@ModeVisuel.Impression" /> Impression recto-verso</label></div>
            <div><label><input type="radio"  @onchange="ChangerVisuel" checked="@modeVisuel.Equals(ModeVisuel.Debogage)" name="mode-visuel" value="@ModeVisuel.Debogage" /> Débogage</label></div>
        </fieldset>

        @if (modeVisuel == ModeVisuel.Impression)
        {
            <label class="champ">
                Cartes par feuille:
                <input type="number" @bind="nombreCartesParFeuille" min="1" max="@villes.Length" />
            </label>
        }
    </div>


    @if (modeVisuel == ModeVisuel.Impression)
    {
        @foreach (var page in GetVillesPaginees())
        {
            <div class="cartes">
                @foreach (var ville in page)
                {
                    <Recto ville="@ville" villeDepart="@villeDepart" />
                }
            </div>

            <div class="cartes verso">
                @foreach (var ville in page)
                {
                    <Verso ville="@ville" villeDepart="@villeDepart" />
                }
            </div>
        }

    }
    else
    {
        <div class="cartes debogage">
            @foreach (var ville in GetVillesTriees())
            {
                <Recto ville="@ville" villeDepart="@villeDepart" />
                <Verso ville="@ville" villeDepart="@villeDepart" />
            }
        </div>
    }
}

@code {
    enum ModeVisuel
    {
        Debogage,
        Impression
    }

    enum Tri
    {
        Defaut,
        Distance,
        Alphabetique
    }

    private ModeVisuel modeVisuel = ModeVisuel.Debogage;
    private Tri tri = Tri.Defaut;
    private bool triInverse = false;
    private Ville[]? villes;
    private Ville? villeDepart;
    private int nombreCartesParFeuille = 9;

    protected override async Task OnInitializedAsync()
    {
        villes = await VilleService.ChargerVilles();
        villeDepart = villes[0];

        FiligraneService.DefinirVilles(villes.Select(villes => villes.Nom));
    }

    IEnumerable<Ville> GetVillesTriees()
    {
        IEnumerable<Ville> villesTriees = villes!;

        switch (tri)
        {
            case Tri.Alphabetique:
                villesTriees = villesTriees.OrderBy(ville => ville.Nom);
                break;
            case Tri.Distance:
                villesTriees = villesTriees.OrderBy(ville => ville.Coordonnees.GetDistanceTo(villeDepart.Coordonnees));
                break;
        }

        if (triInverse)
        {
            villesTriees = villesTriees.Reverse();
        }

        return villesTriees;
    }


    Ville[][] GetVillesPaginees()
    {
        return GetVillesTriees()
            .Select((ville, index) => new { Index = index, Ville = ville })
            .GroupBy(x => x.Index / nombreCartesParFeuille)
            .Select(x => x.Select(v => v.Ville).ToArray())
            .ToArray();
    }

    void ChangerVilleDepart(ChangeEventArgs evenement)
    {
        villeDepart = villes.First(ville => ville.Nom.Equals(evenement.Value));
    }
    
    void ChangerVisuel(ChangeEventArgs evenement)
    {
        modeVisuel = Enum.Parse<ModeVisuel>((string)evenement.Value!);
    }

    void ChangerTri(ChangeEventArgs evenement)
    {
        tri = Enum.Parse<Tri>((string)evenement.Value!);
    }
}
