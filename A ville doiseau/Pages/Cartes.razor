@inherits LayoutComponentBase
@page "/"
@inject IJSRuntime JS
@using System.Globalization;

<PageTitle>Villes</PageTitle>

@using A_ville_doiseau.Villes
@inject VilleService VilleService

<h1>Les différentes villes</h1>

@if (villes == null || villeDepart == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="@ChangerVilleDepart">
        @foreach (var ville in villes)
        {
            <option value="@ville.Nom">@ville.Nom</option>
        }
    </select>

    <div class="cartes">
        @foreach (var ville in villes)
        {
            <div class="carte recto">
                <div class="image-fond">
                    <a href="@ville.LienWikipedia">
                        <img src="@ville.Image" />
                    </a>
                </div>
                <div class="libelle fond-blanc">
                    <h2 class="nom">@ville.Nom</h2>
                </div>
            </div>
            <div class="carte verso">
                <div class="distance fond-blanc"><h2></h2></div>
                <div class="nom newfoundland fond-blanc"><h3>@ville.Nom</h3></div>
                <div
                    class="carte-quebec"
                    data-latitude="@ville.Latitutde.ToString(CultureInfo.InvariantCulture)"
                    data-longitude="@ville.Longitude.ToString(CultureInfo.InvariantCulture)"
                ></div>
            </div>
        }
    </div>
}

@code {
    private Ville[]? villes;
    private Ville? villeDepart;

    protected override void OnInitialized()
    {
        villes = VilleService.ChargerVilles();
        villeDepart = villes[0];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (villeDepart == null)
        {
            return;
        }

        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Cartes.razor.js");
        _ = module.InvokeVoidAsync("CreerCartesDuQuebec", villeDepart.Latitutde, villeDepart.Longitude);
    }

    void ChangerVilleDepart(ChangeEventArgs evenement)
    {
        villeDepart = villes.First(ville => ville.Nom.Equals(evenement.Value));
    }
}
